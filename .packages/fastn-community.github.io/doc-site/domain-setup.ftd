-- import: fastn-community.github.io/doc-site/assets





-- ds.page: Configuring your site
document-title: fastn Doc-Site Template. Build Your Own Website with Ease
document-description: Simple, easy-to-use doc-site template to build your own documentation website, personal website, or blog. Change colours and typography effortlessly.
document-image: https://fastn.com/-/fastn.com/images/fastn-logo.png

-- ds.h2: 1: Registering your domain on [Godaddy.com](https://www.godaddy.com/)
id: step-1

To register your domain on [Godaddy.com](https://www.godaddy.com/) you need to 
register with Godaddy.com, if you are not registered. If you are already 
registered then login to your account and shop for your domain.

- Registered users click on this link to Sign-In: https://sso.godaddy.com/
- Non-Registered users click this link to Sign-Up: https://sso.godaddy.com/account/create

Once you are Signed-In then search for your desired domain name:

-- ds.image: Figure 1:  Search for your desired domain
src: $assets.files.static.domains.figure-1.png
width: fill-container

-- ds.markdown: 

For e.g., if you want to register your domain name as jonhywalker.com type
`jonhywalker.com` into the above input field and click on Search Domain
button.

If `jonhywalker.com` is available for registration then it will show below
screen:

-- ds.image: Figure 2: Search for your desired domain
src: $assets.files.static.domains.figure-2.png
width: fill-container

-- ds.h2: 2: GitHub repository 
;;id: step-2

Let’s understand fastn project creation in just 5 minutes by playing!

With this, we are also going to create our new fastn website by following the
very short embedded tutorial.

Do you have a GitHub account?

Log in with [GitHub.com](https://github.com/login?return_to=https%3A%2F%2Fgithub.com%2Fsign-in) into your GitHub account.

Or

Create your GitHub account by following simple steps by the 
[GitHub sign-up process](https://github.com/signup?ref_cta=Sign+up&ref_loc=header+logged+out&ref_page=%2F&source=header-home).

Now as you signed into your GitHub account, let's start creating our first fastn 
website project on GitHub.

To start with it, create a repository using fastn-template - 
[Click here](https://github.com/fastn-stack/fastn-template/generate)

-- ds.image: Figure 3: How to create new repository using fastn-template
src: $assets.files.static.domains.figure-3.png
width: fill-container

-- ds.markdown:

Click on Public to make your fastn website visible to the public. You can click
on Private in case you want to keep it private. We recommend keeping the Public
selected.

You can also add a description of your fastn website (optional).

Once you click on the `Create repository from template` button your first ever
fastn web repository is ready.

-- ds.image: Figure 4: Creating GitHub repository using fastn-template
src: $assets.files.static.domains.figure-4.png
width: fill-container

-- ds.markdown:

Edit your repository README.md file and remove default content from it. 

Follow the below steps to make your first `fastn` website live.

- Click on the `Actions` tab and check for the green tick, if the Update
  README.md workflow ran successfully.

-- ds.image: Figure 5: Creating a GitHub repository using fastn-template
src: $assets.files.static.domains.figure-5.png
width: fill-container

-- ds.markdown:

- Click on the `Settings` tab and follow `Step-1` to `Step-5` shown in below
  image:

-- ds.image: Figure 6: On ⚙️ `Settings` tab follow Step-1 to Step-5 
src: $assets.files.static.domains.figure-6.png
width: fill-container

-- ds.markdown:

- Click on the `Actions` tab and check for the green tick, if `pages build and 
deployment` workflow ran successfully.

-- ds.image: Figure 7: pages build and deployment workflow should run successfully
src: $assets.files.static.domains.figure-7.png
width: fill-container

-- ds.markdown:

Once pages build and deployment ran successfully. Your first `fastn` website is
live.

To see your live website click on the `Settings` tab and follow the below steps:

-- ds.image: Figure 8: On  ⚙️ Settings → Pages → click on `Visit site` button
src: $assets.files.static.domains.figure-8.png
width: fill-container


-- ds.h2: 3: GitHub repository link to Godaddy website 

We have already registered your domain using Godaddy.com. Let’s link your GitHub
repository with your website by adding DNS(Domain Name System) configurations
to it.

Follow the below steps to add DNS configurations:

- Visit GitHub documentation to update DNS configurations. 
To open - [Click here](https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain).

- Go to Step No. 5 - Keep this documentation open in the browser tab

- Switch to the new tab OR go to the Godaddy.com account dashboard and follow
  below steps:

- Click on your user name and select the My Products link from the dropdown
  menu.

-- ds.image: Figure 9: Click on DNS button
src: $assets.files.static.domains.figure-9.png
width: fill-container

-- ds.markdown:

Or

- Change your .com domain name from the below URL: https://dcc.godaddy.com/manage/jonhywalker.com/dns

And open it in the browser tab you should see the below screen:

-- ds.image: Figure 10: Click on Add button
src: $assets.files.static.domains.figure-10.png
width: fill-container

-- ds.markdown:

- Click on Add button below the box that will appear on the screen. Click on
  Type and select A from the dropdown menu. As shown in Step 1 and Step 2

-- ds.image: Figure 11: Follow Step 1 and Step 2
src: $assets.files.static.domains.figure-11.png
width: fill-container

-- ds.markdown:

- In the Name field type @ 

- In Value enter 185.199.108.153 ip address([refer Step No.2 from this document](https://docs.google.com/document/d/1aD_nol3-4QSQW4d5Tn9BgpwbDj58eQAMtbiBtZCB5I8/edit#bookmark=id.ohc2t8qa8z6x))

- In TTL click on dropdown and select custom option and enter value `600`

-- ds.image: Figure 12: Follow Step 1 to Step 6
src: $assets.files.static.domains.figure-12.png
width: fill-container

-- ds.markdown:

- Add all 4 IPs A records mentioned in GitHub documentation ([refer Step No.2 from this document](https://docs.google.com/document/d/1aD_nol3-4QSQW4d5Tn9BgpwbDj58eQAMtbiBtZCB5I8/edit#bookmark=id.ohc2t8qa8z6x))

185.199.108.153
185.199.109.153
185.199.110.153
185.199.111.153

- Repeat Step 7 to Step 10 from this document.

- Once you add all four A record IP addresses. Then start adding AAAA records

2606:50c0:8000::153
2606:50c0:8001::153
2606:50c0:8002::153
2606:50c0:8003::153

- Repeat Step 7 to Step 10 from this document. And select AAAA record instead of 
A record.

- Editing CNAME record: on the same screen you will find the CNAME record click on edit
  icon

-- ds.image: Figure 13: Click on edit icon
src: $assets.files.static.domains.figure-13.png
width: fill-container

-- ds.markdown:

- You will see below the CNAME record box opened for editing

-- ds.image: Figure 14: Click on Save button
src: $assets.files.static.domains.figure-14.png
width: fill-container

-- ds.markdown:

- Update the Value shown in the above image and click save. CNAME value is always 
your GitHub username and github.io

- So if your GitHub username is johnywalker75 then your CNAME value will be
  johnywalker75.github.io

- Your Godaddy domain configuration is ready. 

- Go to your GitHub repository and click on Add file dropdown and select Create
  new file,

-- ds.image: Figure 15: Follow Step 1 and Step 2
src: $assets.files.static.domains.figure-15.png
width: fill-container

-- ds.markdown:

- Enter filename as CNAME (without any extension)

-- ds.image: Figure 16: Creating CNAME file
src: $assets.files.static.domains.figure-16.png
width: fill-container

-- ds.markdown:

- Click on the Commit new file button. A CNAME file will be created on your
  repository root directory.

- Click on ⚙️ Settings and select the Pages link from the left sidebar. Scroll
  down to Custom domain section and add your domain name into the  custom
  domain input box,

-- ds.image: Figure 17: Follow Step 1 and Step 2
src: $assets.files.static.domains.figure-17.png
width: fill-container

-- ds.markdown:

- Click on the Save button and Once the DNS check is done you can click to
  enforce HTTPS for your domain.

Congratulations! your `www.johnywalker.com` domain is now public live.

-- end: ds.page
